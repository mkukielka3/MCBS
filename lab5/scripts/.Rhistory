q()
### Load the packages
library("deal")
library("yeastCC")
expr <- as.data.frame(t(exprs(yeastCC)[orf800,]))
cat("Observations:", nrow(expr), "\n")
cat("Genes:", ncol(expr), "\n")
for (j in 1:ncol(expr)) {
index_na <- which(is.na(expr[,j]))  # indices of NAs
expr[index_na, j] <- median(expr[,j], na.rm=T)  # replace by median
}
medianfill <- function(exprCol) {
exprCol[which(is.na(exprCol))] <- median(exprCol, na.rm=T)
return(exprCol)
}
expr <- as.data.frame(apply(expr, 2, medianfill))
iqr <- vector(length=ncol(expr))
for (j in 1:ncol(expr)) {
iqr[j] <- quantile(expr[,j], c(0.75)) - quantile(expr[,j], c(0.25))
}
# apply() alternative
gene.iqr <- function(exprCol) {
quantile(exprCol, c(0.75)) - quantile(exprCol, c(0.25))
}
iqr <- apply(expr, 2, gene.iqr)
expr = expr[, iqr > 1.6]   # keep only genes with large variation
names(expr)
expr$dummy <- factor(rep("1", nrow(expr)))
head(expr)
G0  <- network(expr, specifygraph=TRUE, inspectprob=TRUE)
G0  <- network(expr, specifygraph=TRUE, inspectprob=TRUE)
library(readr)
library(stringr)
install.packages
install.packages('readr')
install.packages('stringr')
install.packages("stringr")
library(readr)
library(stringr)
GlabGad <- read_file('GlabGad_formatted.txt')
getwd()
setwd("/home/gosia/Documents/SDA2")
setwd("/home/gosia/Documents/SDA2")
setwd("/home/gosia/Documents/SDA2")
setwd('/home/gosia/Documents/SDA2')
BiocManager::install(c("Biobase","limma","genefilter","edge","qvalue"))
BiocManager::install(c("jackstraw"))
quit()
library(combat)
library(devtools)
library(devtools)
library(Biobase)
library(sva)
library(bladderbatch)
library(broom)
library(tidyverse)
library(data.table)
library(devtools)
library(Biobase)
library(sva)
library(bladderbatch)
library(broom)
library(tidyverse)
library(data.table)
library(sva)
con = url("http://bowtie-bio.sourceforge.net/recount/ExpressionSets/bottomly_eset.RData")
load(file=con)
close(con)
edata <- as.matrix(exprs(bottomly.eset))
dim(edata)
edata <- edata[rowMeans(edata) > 10, ]
edata <- log2(as.matrix(edata) + 1)
edata <- t(scale(t(edata), scale=FALSE, center=TRUE))
#svd.out <- svd(edata)
batch = pheno$batch
combat_edata = ComBat(dat=edata, batch=pheno$batch, mod=model.matrix(~1, data=pheno), par.prior=TRUE, prior.plots=TRUE)
pheno = pData(bladderEset)
# expression data
edata = exprs(bladderEset)
edata <- as.matrix(exprs(bottomly.eset))
dim(edata)
#edata <- edata[rowMeans(edata) > 10, ]
#edata <- log2(as.matrix(edata) + 1)
edata <- edata[row.variances < 6,]
#edata <- t(scale(t(edata), scale=FALSE, center=TRUE))
#svd.out <- svd(edata)
batch = pheno$batch
combat_edata = ComBat(dat=edata, batch=pheno$batch, mod=model.matrix(~1, data=pheno), par.prior=TRUE, prior.plots=TRUE)
svd.out.combat <- svd(combat_edata)
svd.combat.plot <- data.table(svd.out.combat$v[,1:10], pheno)
pheno = pData(bladderEset)
# expression data
edata = exprs(bladderEset)
edata <- as.matrix(exprs(bottomly.eset))
dim(edata)
#edata <- edata[rowMeans(edata) > 10, ]
#edata <- log2(as.matrix(edata) + 1)
row.variances <- apply(edata, 1, function(x) var(x))
edata <- edata[row.variances < 6,]
#edata <- t(scale(t(edata), scale=FALSE, center=TRUE))
#svd.out <- svd(edata)
batch = pheno$batch
combat_edata = ComBat(dat=edata, batch=pheno$batch, mod=model.matrix(~1, data=pheno), par.prior=TRUE, prior.plots=TRUE)
svd.out.combat <- svd(combat_edata)
svd.combat.plot <- data.table(svd.out.combat$v[,1:10], pheno)
library(bladderbatch)
data(bladderdata)
suppressPackageStartupMessages({
library(ggplot2)
library(devtools)
library(Biobase)
library(sva)
library(bladderbatch)
library(broom)
library(tidyverse)
})
library(devtools)
library(Biobase)
library(sva)
library(bladderbatch)
library(broom)
library(tidyverse)
library(data.table)
source('~/.active-rstudio-document', echo=TRUE)
dim(edata)
dim(edata[1:4000,])
edata <- edata[1:4000,]
batch = pheno$batch
combat_edata = ComBat(dat=edata, batch=pheno$batch, mod=model.matrix(~1, data=pheno), par.prior=TRUE, prior.plots=TRUE)
my_palette <- colorRampPalette(c("blue", "white", "darkred"))(n = 299)
ord <- data.frame(batch = pheno$batch, cols = colnames(edata))
ord <- ord[order(ord$batch),]
ordered_edata <- edata[,ord$cols] #order data by batches
png("../figures/kukielka_problem2_before.png",height=700,width=700)
heatmap.2(ordered_edata,
main = "Bladder Cancer Data Clustered", # heat map title
notecol="black",      # change font color of cell labels to black
density.info="none",  # turns off density plot inside color legend
trace="none",         # turns off trace lines inside the heat map
margins =c(12,9),     # widens margins around plot
col=my_palette,       # use on color palette defined earlier
dendrogram="none",     # only draw a row dendrogram
scale = "row",
Colv = FALSE)
dev.off()
edata <- edata[1:4000,]
library(devtools)
library(Biobase)
library(sva)
library(bladderbatch)
library(broom)
library(tidyverse)
library(data.table)
library(gridExtra)
library(ggplot2)
library(gplots)
library(RColorBrewer)
setwd("~/Documents/BIOINF/MCBS/lab5/lab5/scripts")
# sample info
pheno = pData(bladderEset)
# expression data
edata = exprs(bladderEset)
#sumna <- apply(edata, 1, function(x) sum(is.na(x)))
row.variances <- apply(edata, 1, function(x) var(x))
edata <- edata[row.variances < 6,]
edata.log <- log2(edata)
# Homework Problem 2:*
# Make heatmaps, BEFORE and AFTER cleaning the data using ComBat, where columns are arranged according to the
# study design. You must sort the columns such that 5 batches are shown. Cluster the rows, but do not cluster
# the columns (samples) when drawing a heatmap. The general idea is that you want to see if the Combat-cleaned data
# are any improvement in the general patterns.
edata <- edata[1:4000,]
batch = pheno$batch
combat_edata = ComBat(dat=edata, batch=pheno$batch, mod=model.matrix(~1, data=pheno), par.prior=TRUE, prior.plots=TRUE)
my_palette <- colorRampPalette(c("blue", "white", "darkred"))(n = 299)
ord <- data.frame(batch = pheno$batch, cols = colnames(edata))
ord <- ord[order(ord$batch),]
ordered_edata <- edata[,ord$cols] #order data by batches
png("../figures/kukielka_problem2_before.png",height=700,width=700)
heatmap.2(ordered_edata,
main = "Bladder Cancer Data Clustered", # heat map title
notecol="black",      # change font color of cell labels to black
density.info="none",  # turns off density plot inside color legend
trace="none",         # turns off trace lines inside the heat map
margins =c(12,9),     # widens margins around plot
col=my_palette,       # use on color palette defined earlier
dendrogram="none",     # only draw a row dendrogram
scale = "row",
Colv = FALSE)
dev.off()
png("../figures/kukielka_problem2_after.png",height=700,width=700)
heatmap.2(combat_edata,
main = "Bladder Cancer Data Cleaned by ComBat", # heat map title
notecol="black",      # change font color of cell labels to black
density.info="none",  # turns off density plot inside color legend
trace="none",         # turns off trace lines inside the heat map
margins =c(12,9),     # widens margins around plot
col=my_palette,       # use on color palette defined earlier
dendrogram="none",     # only draw a row dendrogram
scale = "row")
dev.off()
# *Homework Problem 3:*
# Make heatmaps of Pearson correlations statistics of samples. For example, see Figure 2 and 3 freom Gilad and
# Mizrahi-Man (2015) F1000Research: \url{https://f1000research.com/articles/4-121}.
# First, compute the correlation statistics among columns. Second, create a heatmap using heatmap.2().
# Make sure to create or add labels for samples (cancer vs. normal; batch numbers; others)
corr_matrix <- cor(edata, method = 'pearson')
reorderfun=function(d,w) { d }
my_palette <- colorRampPalette(c("blue", "white", "darkred"))(n = 299)
png("../figures/kukielka_problem3.png",height=700,width=700)
heatmap.2(corr_matrix,
main = "Bladder Cancer Data Variable Correlation", # heat map title
notecol="black",      # change font color of cell labels to black
density.info="none",  # turns off density plot inside color legend
trace="none",         # turns off trace lines inside the heat map
margins =c(6,5),     # widens margins around plot
col=my_palette,       # use on color palette defined earlier
dendrogram="row",     # only draw a row dendrogram
labCol = rev(pheno$outcome),
labRow = pheno$cancer,
xlab = "Outcome",
ylab = "Cancer",
scale = "none",
symm=T)
dev.off()
edata <- edata[1:4000,]
batch = pheno$batch
combat_edata = ComBat(dat=edata, batch=pheno$batch, mod=model.matrix(~1, data=pheno), par.prior=TRUE, prior.plots=TRUE)
my_palette <- colorRampPalette(c("blue", "white", "darkred"))(n = 299)
ord <- data.frame(batch = pheno$batch, cols = colnames(edata))
ord <- ord[order(ord$batch),]
ordered_edata <- edata[,ord$cols] #order data by batches
heatmap.2(ordered_edata,
main = "Bladder Cancer Data Clustered", # heat map title
notecol="black",      # change font color of cell labels to black
density.info="none",  # turns off density plot inside color legend
trace="none",         # turns off trace lines inside the heat map
margins =c(12,9),     # widens margins around plot
col=my_palette,       # use on color palette defined earlier
dendrogram="row",     # only draw a row dendrogram
scale = "row",
Colv = FALSE)
heatmap.2(ordered_edata,
main = "Bladder Cancer Data Clustered", # heat map title
notecol="black",      # change font color of cell labels to black
density.info="none",  # turns off density plot inside color legend
trace="none",         # turns off trace lines inside the heat map
margins =c(12,9),     # widens margins around plot
col=my_palette,       # use on color palette defined earlier
dendrogram="row",     # only draw a row dendrogram
labCol = ord$batch,
scale = "row",
Colv = FALSE)
heatmap.2(combat_edata,
main = "Bladder Cancer Data Cleaned by ComBat", # heat map title
notecol="black",      # change font color of cell labels to black
density.info="none",  # turns off density plot inside color legend
trace="none",         # turns off trace lines inside the heat map
margins =c(12,9),     # widens margins around plot
col=my_palette,       # use on color palette defined earlier
dendrogram="row",     # only draw a row dendrogram
labCol = ord$batch,
scale = "row",
Colv = FALSE)
heatmap.2(combat_edata[,ord$cols],
main = "Bladder Cancer Data Cleaned by ComBat", # heat map title
notecol="black",      # change font color of cell labels to black
density.info="none",  # turns off density plot inside color legend
trace="none",         # turns off trace lines inside the heat map
margins =c(12,9),     # widens margins around plot
col=my_palette,       # use on color palette defined earlier
dendrogram="row",     # only draw a row dendrogram
labCol = ord$batch,
scale = "row",
Colv = FALSE)
png("../figures/kukielka_problem2_before.png",height=700,width=700)
heatmap.2(ordered_edata,
main = "Bladder Cancer Data Clustered", # heat map title
notecol="black",      # change font color of cell labels to black
density.info="none",  # turns off density plot inside color legend
trace="none",         # turns off trace lines inside the heat map
margins =c(12,9),     # widens margins around plot
col=my_palette,       # use on color palette defined earlier
dendrogram="row",     # only draw a row dendrogram
labCol = ord$batch,
scale = "row",
Colv = FALSE)
dev.off()
png("../figures/kukielka_problem2_after.png",height=700,width=700)
heatmap.2(combat_edata[,ord$cols],
main = "Bladder Cancer Data Cleaned by ComBat", # heat map title
notecol="black",      # change font color of cell labels to black
density.info="none",  # turns off density plot inside color legend
trace="none",         # turns off trace lines inside the heat map
margins =c(12,9),     # widens margins around plot
col=my_palette,       # use on color palette defined earlier
dendrogram="row",     # only draw a row dendrogram
labCol = ord$batch,
scale = "row",
Colv = FALSE)
dev.off()
source('~/Documents/BIOINF/MCBS/lab5/lab5/scripts/lab5_bladderbatch.r')
quit
quit()
